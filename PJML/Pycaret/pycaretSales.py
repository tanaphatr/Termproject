from datetime import datetime, timedelta
from pycaret.regression import *
from flask import Flask, jsonify
import pandas as pd
import os
import sys
import joblib

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'PJML')))

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
from Datafile.load_data import load_data
from Preprocess.preprocess_data import preprocess_data

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask Application
app = Flask(__name__)

@app.route('/', methods=['GET'])
def forecast_sales():
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        data = load_data()

        # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ preprocess ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        data = preprocess_data(data)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤ NaT ‡πÉ‡∏ô sale_date
        data['sale_date'] = pd.to_datetime(data['sale_date'], errors='coerce')
        data = data.dropna(subset=['sale_date'])
        
        print(f"Missing sale_date entries: {data['sale_date'].isna().sum()}")

        base_dir = os.path.dirname(os.path.abspath(__file__))
        model_dir = os.path.join(base_dir, 'ModelPyCaret')
        os.makedirs(model_dir, exist_ok=True)

        model_path1 = os.path.join(model_dir, 'Pycaret_model.pkl')
        date_path = os.path.join(model_dir, 'last_trained_date1.pkl')

        # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        if os.path.exists(model_path1):
            model = joblib.load(model_path1)
            print("üì• ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß")
        else:
            model = None

        # ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if os.path.exists(date_path):
            last_trained_date = joblib.load(date_path)
        else:
            last_trained_date = datetime.min

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if datetime.now() - last_trained_date < timedelta(days=30):
            print("‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡∏£‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 30 ‡∏ß‡∏±‡∏ô)")
            return jsonify({"message": "Model is still up-to-date."})
        
        print("üîÑ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà!")
        
        # PyCaret Setup
        s = setup(
            data=data,
            target='sales_amount',
            session_id=123,
            feature_selection=True,
            train_size=0.8,
            normalize=True,
            remove_outliers=True,
            verbose=False
        )
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        best_model = compare_models()
        tuned_model = tune_model(best_model)
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        prediction = predict_model(tuned_model, data=data)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        joblib.dump(tuned_model, model_path1)
        print(f"üíæ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà {model_path1}")
        
        joblib.dump(datetime.now(), date_path)
        print(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà {date_path}")
        
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
        predicted_sales = prediction.loc[0, 'prediction_label']
        last_date = data['sale_date'].iloc[-1]
        predicted_date = (last_date + timedelta(days=1)).strftime("%Y-%m-%d")
        
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏•
        metrics = pull()
        r2 = metrics.loc[0, "R2"]
        mae = metrics.loc[0, "MAE"]
        mape = metrics.loc[0, "MAPE"]
        
        return jsonify({
            "r2": r2,
            "mae": mae,
            "mape": mape,
            "best_model": str(best_model),
            "predicted_date": predicted_date,
            "predicted_sales": predicted_sales
        })
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='localhost', port=8885, debug=True)